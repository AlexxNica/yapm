var status_bar = require('status-bar')
var URL = require('url')

var streams = []

var storage = [" B", " kB", " MB", " GB", " TB", " PB", " EB", " ZB", " YB"]

var have_progressbar = false

function unref(bar) {
	if (bar._renderTimer != null && bar._renderTimer.ontimeout) {
		bar._renderTimer.unref()
	}
	if (bar._elapsedTimer != null && bar._elapsedTimer.ontimeout) {
		bar._elapsedTimer.unref()
	}
}

function format_storage(b) {
	var unit = function (n, arr, pow) {
		if (n < pow) return n + arr[0]
		var i = 1
		while (i < 9) {
			n /= pow
			var decimals = n < 100 ? 1 : 0
			if (n < pow) return n.toFixed(decimals) + arr[i]
			i++
		}
		return ">=" + pow + arr[7]
	}
	return unit (~~b, storage, 1024)
}

function format_speed(b, decimals) {
	var str = format_storage(b, decimals) + '/s'
	return Array(Math.max(10-str.length, 0)).join(' ') + str
}

function update() {
	have_progressbar = false
	if (!streams.length) return
	var res = format_speed(cs[1].speed) + ' ' + streams.map(function(s) {
		if (!s) return
		if (s.fn) return s.fn()
		var format = s[0]
		var stats = s[1]
		var name = s[2]
		return '[' +
			name + ': ' +
			format_storage(stats.currentSize) +
			'/' +
			format_storage(stats.totalSize) +
		']'
	}).filter(function(x){return !!x}).join(' ')
	write('\033[2K\r' + res.substr(0, process.stdout.columns - 1))
	have_progressbar = true
}

var cs = {}
var control = status_bar.create({
	total: Infinity,
	render: function (stats) {
		cs = [this.format, stats]
		update()
	}
})
unref(control)

function new_stream(name, total) {
	var stream_id = streams.length
	streams.push(null)
	var bar = status_bar.create({
		total: total,
		render: function (stats) {
			streams[stream_id] = [this.format, stats, name]
			update()
		}
	})
	unref(bar)
	bar._id = stream_id
	bar.update(0)
	return bar
}

function shorten(url) {
	url = url.href.replace(/.*\//g, '')
	if (url.match(/\.tgz$/)) {
		url = url.replace(/\.tgz$/, '').split('-')
		url.pop()
		url = url.join('-')
	}
	return url
}

module.exports.wrap = function(url, req) {
	var bar, is_index = false

	if (url.href.match(/\/-\/all$/)) {
		var JSONStream = require('JSONStream')
		var stream = JSONStream.parse('*')
		req.pipe(stream)

		var last = 0
		stream.on('data', function(pkg) {
			if (!pkg.name) return
			var name = pkg.name.toLowerCase()
			var curr = (name.charCodeAt(0)-97 || 0) * 26 + (name.charCodeAt(1)-97 || 0)
			if (curr < 0) curr = 0
			if (curr < last) return
			bar.update(curr - last)
			last = curr
		})

		var format = ''
		streams.push({fn: function() {
			return format
		}})

		bar = status_bar.create({
			total: 26*26,
			render: function (stats) {
				format = '[' + this.format.progressBar(stats.percentage) + '] ' + this.format.time(stats.remainingTime)
				update()
			},
			progressBarLength: 53,
		})
		unref(bar)
		bar._id = streams.length
		is_index = true
	}

	req.on('response', function(res) {
		if (res.headers && res.headers['content-length'] && !is_index) {
			bar = new_stream(shorten(url), res.headers['content-length'])
			update()
		}
	})

	req.on('data', function(data) {
		control.update(data)
		control.cancel()
		unref(control)
		if (bar && !is_index) bar.update(data)
		update()
	})

	req.on('end', end)
	req.on('error', end)

	function end() {
		if (!bar) return
		bar.cancel()
		if (bar._id != null) streams.splice(bar._id, 1)
		bar = null
	}
}

var our_stdout = false

var old_stdout_write = process.stdout.write
process.stdout.write = function() {
	if (!our_stdout) if (have_progressbar) write('\033[2K\r')
	old_stdout_write.apply(process.stdout, arguments)
}

var old_stderr_write = process.stderr.write
process.stderr.write = function() {
	if (!our_stdout) if (have_progressbar) write('\033[2K\r')
	old_stderr_write.apply(process.stderr, arguments)
	if (!our_stdout) if (have_progressbar) update()
}

function write(arg) {
	our_stdout = true
	process.stdout.write(arg)
	our_stdout = false
}

process.on('exit', function exit() {
	if (have_progressbar) write('\n')
})

