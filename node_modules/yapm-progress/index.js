var status_bar = require('status-bar')
var URL = require('url')

var streams = []

var storage = [" B", " kB", " MB", " GB", " TB", " PB", " EB", " ZB", " YB"]

function format_storage(b, decimals) {
	var unit = function (n, arr, pow, decimals) {
		if (n < pow) return n + arr[0]
		var i = 1
		while (i < 9) {
			n /= pow
			if (n < pow) return n.toFixed(decimals) + arr[i]
			i++
		}
		return ">=" + pow + arr[7]
	}
	return unit (~~b, storage, 1024, decimals === undefined ? 1 : decimals)
}

function format_speed(b, decimals) {
	return format_storage(b, decimals) + '/s'
}

function update() {
	if (!streams.length) return
	var res = format_speed(cs[1].speed) + ' ' + streams.map(function(s) {
		if (!s) return
		var format = s[0]
		var stats = s[1]
		var name = s[2]
		return '[' +
			name + ': ' +
			format_storage(stats.currentSize) +
			'/' +
			format_storage(stats.totalSize) +
//			format.speed(stats.speed) + " " +
//			format.time(stats.remainingTime) +
		']'
	}).filter(function(x){return !!x}).join(' ')
	write('\033[2K\r' + res.substr(0, process.stdout.columns - 1))
}

var cs = {}
var control = status_bar.create({
	total: Infinity,
	render: function (stats) {
		cs = [this.format, stats]
		update()
	}
})

function new_stream(name, total) {
	var stream_id = streams.length
	streams.push(null)
	var bar = status_bar.create({
		total: total,
		render: function (stats) {
			streams[stream_id] = [this.format, stats, name]
			update()
		}
	})
	bar._id = stream_id
	bar.update(0)
	return bar
}

/*var x = new_stream('request', 1024)
setInterval(function() {
	control.update('11111111111111111111111111111')
	x.update('11111111111111111111111111111')
	setInterval(function() {
		control.update('11111111111111111111111111111')
		x.update('11111111111111111111111111111')
	}, 1000);
}, 1000);

var y = new_stream('npm', 2024)
setInterval(function() {
	control.update('11111111111111111111111111111')
	y.update('11111111111111111111111111111')
}, 100);*/

var requests = {}

function shorten(url) {
	url = url.href.replace(/.*\//g, '')
	if (url.match(/\.tgz$/)) {
		url = url.replace(/\.tgz$/, '').split('-')
		url.pop()
		url = url.join('-')
	}
	return url
}

module.exports.wrap = function(url, req) {
	url.id = Math.random()

	req.on('response', function(res) {
		if (res.headers && res.headers['content-length']) {
			requests[url.id] = new_stream(shorten(url), res.headers['content-length'])
			update()
		}
	})

	req.on('data', function(data) {
		control.update(data)
		if (requests[url.id]) requests[url.id].update(data)
		update()
	})

	req.on('end', function() {
		if (!requests[url.id]) return
		requests[url.id].cancel()
		streams.splice(requests[url.id]._id, 1)
		delete requests[url.id]
	})

	req.on('error', function() {
		if (!requests[url.id]) return
		requests[url.id].cancel()
		streams.splice(requests[url.id]._id, 1)
		delete requests[url.id]
	})
}

var our_stdout = false

var old_stdout_write = process.stdout.write
process.stdout.write = function() {
	if (!our_stdout) write('\033[2K\r')
	old_stdout_write.apply(process.stdout, arguments)
}

var old_stderr_write = process.stderr.write
process.stderr.write = function() {
	if (!our_stdout) write('\033[2K\r')
	old_stderr_write.apply(process.stderr, arguments)
	if (!our_stdout) update()
}

function write(arg) {
	our_stdout = true
	process.stdout.write(arg)
	our_stdout = false
}

process.on('exit', function() {
	write('\033[2K\r')
})

